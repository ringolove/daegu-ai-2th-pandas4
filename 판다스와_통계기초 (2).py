# -*- coding: utf-8 -*-
"""판다스와 통계기초.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w65SDK9g_-WOgZsySoOKd8VDvd36DTtv

# 통계 기초

##평균
"""

list(range(10))

import random

sales = [random.randint(1,10) for i in range(10)]
sales

mean = sum(sales)/len(sales)
mean

import pandas as pd
df = pd.DataFrame(sales,columns=['sales'])
df

df.mean()

"""##표준 편차"""

import random
sales = [random.randint(1,10) for i in range(10)]
sales

mean = sum(sales)/len(sales)
mean

deviations = [round(s-mean,2) for s in sales]
deviations

import math
분산 = sum([d**2 for d in deviations])/len(deviations)
표준편차 = math.sqrt(분산)
print(분산, 표준편차)

# 0 - 남성, 1 - 여성
genders = [0, 0, 0, 1, 1, 1, 1, 1, 1, 1]
sum(genders)/len(genders)

import pandas as pd
df = pd.DataFrame(sales,columns = ['sales'])
df

df['sales'].std()

"""##중앙값"""

import random

sales = [random.randint(1,10) for i in range(10)]
sales.sort()
print(sales)

# // - 몫을 구하는 연산자
n = len(sales)//2

if len(sales)%2 == 0:
  print(sum(sales[n-1:n+1])/2)
else:
  print(sales[n])

import pandas as pd
df = pd.DataFrame(sales,columns = ['sales'])
df['sales'].median()

"""##사분위수"""

import random

sales = [random.randint(1,100) for i in range(16)]
sales.sort()
print(sales)

# n = (len(sales)//4)
# print('count',n)
# print(f'{sales[n]}, {sales[2*n]}, {sales[3*n]}') 잘못된 코드

import pandas as pd

df = pd.DataFrame(sales, columns = ['sales'])
df

df['sales'].quantile([0,.25,.5,.75,1])

df.describe()

"""## 연습. 누구를 기용할 것인가?"""

players = {
    'p1': [7,9,9,10,10,10,10,10,11,11,13],
    'p2': [7,8,9,9,10,10,10,11,11,12,13],
    'p3': [3,3,6,7,7,10,10,10,11,13,30]
}

import pandas as pd

df = pd.DataFrame(players)
df

df.describe()

"""##list comprehension"""

numbers = list(range(10))
numbers

evens = [n for n in numbers if n%2 == 0]
print(evens)

evens = []
for n in numbers:
  if n%2 == 0:
    evens.append(n)
print(evens)

odds = [n for n in numbers if n%2 != 0]
print(odds)

squre_evens = [n**2 for n in numbers if n%2 == 0]
print(squre_evens)

"""##slicing - 부분집합 꺼내기"""

numbers[-3:]

"""##2일차: 최빈값"""

fruit = ['배','배','배','배','사과','사과','귤','귤','귤']
set(fruit)

fruit_count = dict([(s,fruit.count(s)) for s in set(fruit)])
fruit_count

import pandas as pd

df = pd.DataFrame(fruit, columns=['fruit'])
df

df['fruit'].value_counts()

df['fruit'].value_counts(normalize=True)

"""#판다스 기초

##데이터 불러오기/파악하기
"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/lemonade.csv'
df = pd.read_csv(path)

print(df.shape)
df.info()

df.head(2)

df.tail(2)

df.columns

"""* 보스턴 집값 데이터"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/boston.csv'
df = pd.read_csv(path)

print(df.shape)
df.info()

df.head(2)

df.tail(2)

df.columns

"""* 아이리스 품종 데이터"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/iris.csv'
df = pd.read_csv(path)

print(df.shape)
df.info()

df.head(2)

df.tail(2)

df.columns

"""##Row/Column 선택하기"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/lemonade.csv'
df = pd.read_csv(path)

print(df['온도'].shape)
df['온도'] #시리즈 하나만 꺼낼 수 있음

print(df[['온도']].shape)
df[['온도']] #데이터프레임

df[['온도','판매량']] #칼럼을 리스트로 만들어 한꺼번에 추출

df.iloc[0:3] #슬라이싱 위치값으로 추출 순서대로 꺼냄 중요함

df.loc[0:3] #key값으로 추출

df.iloc[3,1]

df.iloc[2:4,:] #칼럼을 슬라이싱해서 전체 출력

df_sorted = df.sort_values(by=['판매량'],ascending=False)
df_sorted.head()

df_sorted.iloc[0]

df_sorted.loc[0]

"""##원하는 데이터 찾기 - Query/Search"""

(df['온도']>23) #결과값 시리즈

df[(df['온도']>23)] #시리즈된 결과값을 데이터프레임화 = True값만 가져옴

df[(df['온도']>23) | (df['판매량'] == 40)] # | or / & and

d = {'col1': ['Item0', 'Item0', 'Item1', 'Item1'],
     'col2': ['Gold', 'Bronze', 'Gold', 'Silver']}
df1 = pd.DataFrame(d)
df1

df1['col2'].str.contains('o')

df1[df1.col2.str.contains('o')]

"""##실습

###1. chas가 1인 데이터 중에 가장 비싼 집을 찾아봅시다.
"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/boston.csv'
df = pd.read_csv(path)
df.head()

df_selected = df[(df['chas'] == 1)]
df_selected.head()

df_selected.sort_values(by='medv', ascending=False).head()

"""###2. 품종별로 꽃잎 폭이 가장 큰 행을 찾아 비교해 봅시다."""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/iris.csv'
df = pd.read_csv(path)
df.head()

df['품종'].value_counts()

df_selected = df[(df['품종'] == 'setosa')]
df_selected.sort_values(by=['꽃잎폭'], ascending=False).head(1)

df_selected = df[(df['품종'] == 'virginica')]
df_selected.sort_values(by=['꽃잎폭'], ascending=False).head(1)

df_selected = df[(df['품종'] == 'versicolor')]
df_selected.sort_values(by=['꽃잎폭'], ascending=False).head(1)

path = "/content/sample_data/california_housing_test.csv"
df = pd.read_csv(path)
print(df.shape)
df.head()

"""##KRX 증권 데이터"""

#라이브러리 설치 시 맨 앞에 !를 붙여야 실행됨
!pip install finance-datareader

import FinanceDataReader as fdr

# 삼성전자(005930) 전체 (1996-11-05 ~ 현재)
df = fdr.DataReader('005930')
print(df.shape)
df.info()

df.head()

df['Close'].plot.line()

df.tail()

# Apple(AAPL), 2017-01-01 ~ Now
df = fdr.DataReader('AAPL', '2017')
df.tail()

import matplotlib.pyplot as plt
df['Close'][-50:].plot.line()
plt.show()
df['Volume'][-50:].plot.bar()
plt.show()

"""##그루핑/집계하기"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/iris.csv'
df = pd.read_csv(path)
df.head()

print("sum()")
print(df[['꽃잎길이', '꽃잎폭']].sum())

print("mean()")
print(df[['꽃잎길이', '꽃잎폭']].mean())

print("std()")
print(df[['꽃잎길이', '꽃잎폭']].std())

print("median()")
print(df[['꽃잎길이', '꽃잎폭']].median())

print("min()")
print(df[['꽃잎길이', '꽃잎폭']].min())

print("max()")
print(df[['꽃잎길이', '꽃잎폭']].max())

df.groupby(['품종'])[['꽃잎길이', '꽃잎폭']].mean()

df.groupby(['품종'])[['꽃잎길이', '꽃잎폭']].std()

df.groupby(['품종'])[['꽃잎길이', '꽃잎폭']].max()

df.groupby(['품종']).describe()

"""#### 연습문제 1. chas가 1인 데이터들과 0인 데이터의 집값을 집계"""

import pandas as pd
path = "https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/boston.csv"
df = pd.read_csv(path)
df.head()

df.groupby(['chas'])[['medv']].describe()

"""#### 연습문제 2. 품종별로 꽃잎, 꽃받침을 집계"""

import pandas as pd
path = "https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/iris.csv"
df = pd.read_csv(path)
df.head()

df.groupby(['품종'])[['꽃잎길이', '꽃잎폭']].describe()

df.groupby(['품종'])[['꽃받침길이', '꽃받침폭']].describe()

"""#### 연습문제 3. 쿼리를 통해 데이터를 선택하여 집계"""

import pandas as pd
path = 'https://raw.githubusercontent.com/blackdew/ml-tensorflow/master/data/csv/boston.csv'
df = pd.read_csv(path)
df.head()

df[(df['age'] < 20)]['medv'].describe()

df[(df['age'] > 20)]['medv'].describe()

df[(df['age'] < 68.5)]['medv'].describe()

df[(df['age'] > 68.5)]['medv'].describe()

"""#### 연습문제 4. 알게된 정보와 떠오르는 질문을 기록해두자.
- age의 평균은 68.4
- age가 68.4보다 큰 경우 집값 평균은 19.85
- age가 68.4보다 작은 경우 집값 평균은 26.21
"""

df.info()

"""### anscombe data"""

import pandas as pd
df = pd.read_json("/content/sample_data/anscombe.json")
df.head()

# 칼럼명 바꾸기
df.columns = ['season', 'ad', 'sales']
df.head()

"""##합치기"""

import pandas as pd
df1 = pd.DataFrame([[1,2,3,4],[4,5,6,7],[7,8,9,10]])
df2 = pd.DataFrame([[1,2,3,5],[4,5,6,7],[7,8,9,10]])
print(df1.shape, df2.shape)

df_concat = pd.concat([df1, df2], axis=0)
print(df_concat.shape)
df_concat

df_concat = df_concat.reset_index(drop=True)
df_concat

df_concat = pd.concat([df1, df2], axis=1)
print(df_concat.shape)
df_concat

df_concat.columns = [0,1,2,3,4,5,6,7]
df_concat

print(df_concat.mean(axis=0))
df_concat.mean(axis=0).shape

print(df_concat.mean(axis=1))
df_concat.mean(axis=1).shape

"""### 데이터 시각화"""

import seaborn as sns

df = sns.load_dataset('tips')
print(df.shape)
df.info()
df.head()

df.describe()

df['sex'].value_counts()

df['smoker'].value_counts()

df['day'].value_counts()

df['time'].value_counts()

"""### 데이터 요약: 범주형 변수
- 절대 빈도
-상대 빈도
"""

pd.DataFrame({'절대빈도': df['sex'].value_counts(),
              '상대빈도': df['sex'].value_counts(normalize=True)})

pd.DataFrame({'절대빈도': df['smoker'].value_counts(),
              '상대빈도': df['smoker'].value_counts(normalize=True)})

pd.DataFrame({'절대빈도': df['day'].value_counts(),
              '상대빈도': df['day'].value_counts(normalize=True)})

pd.DataFrame({'절대빈도': df['time'].value_counts(),
              '상대빈도': df['time'].value_counts(normalize=True)})

pd.DataFrame({'절대빈도': df['size'].value_counts(),
              '상대빈도': df['size'].value_counts(normalize=True)})

"""#### 범주형 변수의 시각화
- bar 그래프
- pie 그래프
"""

#df['day'].value_counts().plot.bar()
#sns.countplot(x="day", data=df)
sns.catplot(x="day", data=df, kind='count')

df['day'].value_counts().plot.pie(autopct="%0.1f%%")

"""## 부록. json에 대하여
- json은 원래 javascript에서 프로그램끼리 데이터를 주고받기 위해 만들어진 포맷
- 워낙 좋아서 모든 언어에서 표준처럼 사용하기 시작
- dict + list 구조를 표현할 수 있다
"""

students = [
      {'name': 'blackdew', 'math': 50, 'eng':60},
      {'name': 'egoing', 'math': 60, 'eng':50}
]

import json
json.dumps(students)

with open('sample.json', 'w') as f:
    f.write(json.dumps(students))

with open('sample.json', 'r') as f:
    s = f.read()
print(s)

ss = json.loads(s)
print(f"이름: {ss[0]['name']}, 영어: {ss[0]['eng']}")

"""### 데이터 요약: 수치형 변수
- 평균, 표준편차, 중앙값, 사분위수 (describe)
- 시각화
 -  histogram, kde(density)
 - boxplot
"""

df.describe()

#df['tip'].plot.box()
sns.boxplot(x='tip', data=df)

#df['tip'].plot.hist(grid=1, bins=10)
sns.histplot(x='tip', data=df, bins=10, kde=True)

sns.violinplot(x='tip', data=df)

"""### 변수의 상관관계: 수치형 - 수치형
- scatter
- 상관계수
"""

sns.scatterplot(x='total_bill', y='tip', data=df)

sns.lmplot(data=df, x="total_bill", y="tip")

df.corr()

"""### 변수의 상관관계: 범주형 - 범주형

- cross table / contingency table
- grouped bar graph

 sex, smoker, day, time, size
"""

pd.crosstab(df['sex'], df['smoker'], margins=True)

pd.crosstab(df['sex'], df['smoker'], margins=True, normalize='all')

pd.crosstab(df['sex'], df['smoker'], margins=True, normalize='columns') # 두 값이 같으므로 서로 상관없는 변수

pd.crosstab(df['sex'], df['smoker'], margins=True, normalize='index') # 두 값이 같으므로 서로 상관없는 변수

pd.crosstab(df['sex'], df['day'], margins=True, normalize='index') # day와 성별은 상관이 있다

pd.crosstab(df['sex'], df['day'], margins=True, normalize='columns') # day와 성별은 상관이 있다

#sns.countplot(x='sex', hue='smoker', data=df)
sns.catplot(x='sex', hue='smoker', data=df, kind="count")

sns.catplot(x='day', hue='sex', data=df, kind="count")

"""### 변수의 상관관계: 범주형 - 수치형
- 범주별 통계량
- grouped boxplot/violinplot
"""

df.groupby(['day'])[['tip']].describe()

df.info()

df.groupby(['sex'])[['tip']].describe()

df.groupby(['time'])[['tip']].describe()

sns.boxplot(x='day', y='tip', hue='sex', data=df)

sns.violinplot(x='day', y='tip', hue='sex', data=df, split=True)

sns.pairplot(df, hue='sex')

"""## Seaborn 시각화 도구 사용법

###countplot
"""

tips = sns.load_dataset("tips")

sns.countplot(x="day", data=tips)

sns.countplot(x="day", hue="sex", data=tips)

sns.countplot(y="day", hue="sex", data=tips)

"""###barplot"""

sns.barplot(x="day", y="total_bill", data=tips, palette=sns.color_palette("pastel"))##, ci=50)

"""## anscombe"""

import pandas as pd
df = pd.read_json('/content/sample_data/anscombe.json')
df.columns = ['season', 'ad', 'sales']
df.head()

df['season'].value_counts()

df.groupby(['season']).describe()

df.describe()

df.corr()

df[(df['season'] == 'I')]

sns.lmplot(x='ad', y='sales', data=df[(df['season'] == 'I')])

sns.lmplot(x='ad', y='sales', data=df, col='season', hue='season')

